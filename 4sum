class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length < 4) return res;
        Arrays.sort(nums);
        kSum(nums, target, 4, 0, res, new ArrayList<>());
        return res;
    }
        private void kSum(int[] nums, int target, int k, int start, List<List<Integer>> res, List<Integer> path) {
        if (k == 2) {
            int lo = start, hi = nums.length - 1;
            while (lo < hi) {
                int sum = nums[lo] + nums[hi];
                if (sum < target) {
                    lo++;
                } else if (sum > target) {
                    hi--;
                } else {
                    List<Integer> sol = new ArrayList<>(path);
                    sol.add(nums[lo]);
                    sol.add(nums[hi]);
                    res.add(sol);
                    lo++;
                    hi--;
                    while (lo < hi && nums[lo] == nums[lo - 1]) lo++;
                    while (lo < hi && nums[hi] == nums[hi + 1]) hi--;
                }
            }
        } else {
            for (int i = start; i <= nums.length - k; i++) {
               
                if (i > start && nums[i] == nums[i - 1]) continue;
               
                if (nums[i] + (k - 1) * nums[nums.length - 1] < target) continue;
                
                if (nums[i] * k > target) break;
               
                if (nums[i] * k == target) {
                    if (nums[i + k - 1] == nums[i]) {
                        List<Integer> sol = new ArrayList<>(path);
                        for (int j = 0; j < k; j++) sol.add(nums[i]);
                        res.add(sol);
                    }
                }
                path.add(nums[i]);
                kSum(nums, target - nums[i], k - 1, i + 1, res, path);
                path.remove(path.size() - 1);
            }
        }
    }
}
